/*Author: Jatin Yadav*/
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.SQLOutput;
import java.util.*;

public class practice{
    static class Reader {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(
                    new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException
        {
            byte[] buf = new byte[10000]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    if (cnt != 0) {
                        break;
                    }
                    else {
                        continue;
                    }
                }
                buf[cnt++] = (byte)c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ') {
                c = read();
            }
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0,
                    BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }
    public static boolean good(long x,long w, long h, long n) {
        return (x/w)*(x/h)>=n;

    }

    static int check(long[] a, long sum) {
        int n = a.length;
        long s = 0;
        int l = -1;

        int mx = -1;
        for (int i = 0; i < n; i++) {
            s += a[i];

            if (s == sum) {
                mx = Math.max(mx, i - l);

                l = i;
                s = 0;
            }

            if (s > sum) {
                return -1;
            }
        }
        if (s != 0) {
            return -1;
        }
        return mx;
    }

    public static long gcd(int a,int b){
        if(b==0){
            return a;

        }
        return gcd(b,a%b);
    }

//MAIN CODE STARTS FROM HERE

    public static void main(String args[])throws IOException {
        Reader s = new Reader();
        int t = s.nextInt();
        while (t-- > 0) {
            int m[] = new int[1001];

            int n = s.nextInt();
            int arr[] = new int[n];
            for(int i=0; i<n; i++) {
                arr[i] = s.nextInt();
            }
            int ans = -1;
            for(int i=0; i<n; i++){
                m[arr[i]] = i+1;


            }
            for(int j = 0; j <1001;j++) {
                for(int i =0; i<=j; i++) {
                    if(m[i]>0 && m[j] >0 && gcd(i,j)==1){
                        ans = Math.max(ans, m[i] + m[j]);

                    }



                }
            }

                System.out.println(ans);

        }




    }
}
